//2020.2.19
//dp的典型例题

class Solution {
public:
    int minDistance(string word1, string word2)
    {
        int m = word1.size(), n = word2.size();
        int dp[m + 1][n + 1];

        for (int i = 0; i <= m; i++) dp[i][0] = i;
        for (int j = 0; j <= n; j++) dp[0][j] = j;
        //base case
        //dp[i][0]表示word2遍历完成，只需删除i个字符即可
        //dp[0][j]表示word1遍历完成，只需插入j个字符即可

        for (int i = 1; i <= m; i++)
        {
            for (int j = 1; j <= n; j++)
            {
                if (word1[i - 1] == word2[j - 1]) dp[i][j] = dp[i - 1][j - 1];
                else {
                    dp[i][j] = min(min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;
                    //dp[i - 1][j]：在word1中删除字符word1[i-1]
                    //dp[i][j - 1]：在word1中插入字符word2[j-1]
                    //dp[i - 1][j - 1]：将word1[i-1]替换成word2[j-1]
                }
            }
        }
        return dp[m][n];
    }
};